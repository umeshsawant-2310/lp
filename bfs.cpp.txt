#include <bits/stdc++.h>
#include <omp.h>

using namespace std;

class node
{
  public:
  int data;
  node *left ,*right;
};

class bfs1
{
  public:
  node *insert(node *,int);
  void bfs(node *);
  void dfs(node *);
};


node *insert(node *root, int data)
{
    if(!root)
    {
        root=new node;
        root->data=data;
        root->left=NULL;
        root->right=NULL;
        return root;
    }
    queue<node*> q;
    q.push(root);
    while(!q.empty())
    {
        node *temp=q.front();
   	 q.pop();
    
   	 if(temp->left==NULL)
   	 {
   		 
   		 temp->left=new node;
   		 temp->left->left=NULL;
   		 temp->left->right=NULL;
   		 temp->left->data=data;    
   		 return root;
   	 }
   	 else
   	 {

   	 q.push(temp->left);

   	 }

   	 if(temp->right==NULL)
   	 {
   		 
   		 temp->right=new node;
   		 temp->right->left=NULL;
   		 temp->right->right=NULL;
   		 temp->right->data=data;    
   		 return root;
   	 }
   	 else
   	 {

   	 q.push(temp->right);

   	 }

    }

}

void bfs(node *root)
{
    queue<node*>q;
    q.push(root);
    
    while(!q.empty())
    {
        int qsize=q.size();
        for(int i=0;i<qsize;i++)
        {
            node *curr=q.front();
            q.pop();
            cout<<curr->data<<" ";
            
            if(curr->left)
            {
                q.push(curr->left);
            }
            if(curr->right)
            {
                q.push(curr->right);
            }
        }
    }
}

void para_bfs(node *root)
{
    queue<node*>q;
    q.push(root);
    
    while(!q.empty())
    {
        int qsize=q.size();
        #pragma omp parallel for
        for(int i=0;i<qsize;i++)
        {
            node *curr=q.front();
            #pragma omp critical
            {
            
            q.pop();
            cout<<curr->data<<" ";
            }
            
            #pragma omp critical
            {
            if(curr->left)
            {
                q.push(curr->left);
            }
            if(curr->right)
            {
                q.push(curr->right);
            }
            }
        }
    }
}


void dfs(node *root)
{
    stack<node *> s;
    s.push(root);

    while(!s.empty())
    {
        int n=s.size();
        for(int i=0;i<n;i++)
        {
            node *curr=s.top();
            cout<<curr->data<<" ";
            s.pop();
            
            
            if(curr->right)
            {
              
              s.push(curr->right);
            }
            if(curr->left)
            {
                s.push(curr->left);
            }
        }
    }
}

void para_dfs(node *root)
{
    stack<node *> s;
    s.push(root);

    while(!s.empty())
    {
        int n=s.size();
        #pragma omp parallel for
        for(int i=0;i<n;i++)
        {
            #pragma omp critical
            {
            node *curr=s.top();
            cout<<curr->data<<" ";
            s.pop();
            
            
            if(curr->right)
            {
              
              s.push(curr->right);
            }
            if(curr->left)
            {
                s.push(curr->left);
            }
        }
        }
    }
}


int main()
{
    node *root=NULL;
    int data=0;
    char ans;
    
    do
    {
   	 cout<<"\n enter data=>";
   	 cin>>data;
   	 if(data!=-1)
   	 {
   	 root=insert(root,data);
   	 }
    
    
    }while(data!=-1);
    cout<<"BFS is"<<endl;
    
    auto start=chrono::high_resolution_clock::now();
    bfs(root);
    auto end=chrono::high_resolution_clock::now();
    
    cout<<"\n Time spent on BFS sequential :"<<chrono::duration_cast<chrono::microseconds>(end-start).count()<<" microseconds"<<endl;
    
    auto start1=chrono::high_resolution_clock::now();
    dfs(root);
    auto end1=chrono::high_resolution_clock::now();
    
    cout<<"\n Time spent on DFS sequential :"<<chrono::duration_cast<chrono::microseconds>(end1-start1).count()<<" microseconds"<<endl;
    
    
    auto start2=chrono::high_resolution_clock::now();
    para_bfs(root);
    auto end2=chrono::high_resolution_clock::now();
    
    cout<<"\n Time spent on BFS sequential :"<<chrono::duration_cast<chrono::microseconds>(end2-start2).count()<<" microseconds"<<endl;
    
    auto start3=chrono::high_resolution_clock::now();
    para_dfs(root);
    auto end3=chrono::high_resolution_clock::now();
    
    cout<<"\n Time spent on DFS sequential :"<<chrono::duration_cast<chrono::microseconds>(end3-start3).count()<<" microseconds"<<endl;
    
    
    
    return 0;
}




/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include <bits/stdc++.h>
#include <omp.h>

using namespace std;

void merge(vector<int> &arr)
{
    if(arr.size()<=1)
    {
        return;
    }
    int mid=(arr.size())/2;
    vector<int> left(arr.begin(),arr.begin()+mid);
    vector<int> right(arr.begin()+mid,arr.end());
    merge(left);
    merge(right);
    
    int i=0,j=0,k=0;
    
    while(i<left.size() and j<right.size())
    {
        if(left[i]<=right[j])
        {
            arr[k++]=left[i++];
        }
        else
        {
            arr[k++]=right[j++];
        }
    }
    
    
    while(i<left.size())
    {
        arr[k++]=left[i++];
    }
    
    while(j<right.size())
    {
        arr[k++]=right[j++];
    }
    
}

void para_merge(vector<int> &arr)
{
    if(arr.size()<=1)
    {
        return;
    }
    int mid=(arr.size())/2;
    vector<int> left(arr.begin(),arr.begin()+mid);
    vector<int> right(arr.begin()+mid,arr.end());
    #pragma omp parallel section
    {
    #pragma omp section
    {
        para_merge(left);
    }
    #pragma omp section
    {
        para_merge(right);
    }
    }
    
    
    int i=0,j=0,k=0;
    
    while(i<left.size() and j<right.size())
    {
        if(left[i]<=right[j])
        {
            arr[k++]=left[i++];
        }
        else
        {
            arr[k++]=right[j++];
        }
    }
    
    while(i<left.size())
    {
        arr[k++]=left[i++];
    }
    
    while(j<right.size())
    {
        arr[k++]=right[j++];
    }
}

int main()
{
    int n;
    cin>>n;
    vector<int> a;
    for (int i=0;i<n;i++)
    {
        int z;
        cin>>z;
        a.push_back(z);
    }
    
    auto start=chrono::high_resolution_clock::now();
    merge(a);
    auto end=chrono::high_resolution_clock::now();
    
    
    
    for(int i=0;i<n;i++)
    {
        cout<<a[i]<<" ";
    }
    
    cout<<"\nTime spent in sequential :"<<chrono::duration_cast<chrono::microseconds>(end-start).count()<<" microseconds"<<endl;
    
    
    
    int n1;
    cin>>n1;
    vector<int> a1;
    for (int i=0;i<n1;i++)
    {
        int z;
        cin>>z;
        a1.push_back(z);
    }
    
    auto start1=chrono::high_resolution_clock::now();
    para_merge(a1);
    auto end1=chrono::high_resolution_clock::now();
    
    
    
    for(int i=0;i<n1;i++)
    {
        cout<<a1[i]<<" ";
    }
    
    cout<<"\nTime spent in parallel :"<<chrono::duration_cast<chrono::microseconds>(end1-start1).count()<<" microseconds"<<endl;
    
    
    
    
    return 0;
}




/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <bits/stdc++.h>

using namespace std;


void swap(int *a,int *b)
{
    int temp=*a;
    *a=*b;
    *b=temp;
}

void bubble(vector<int> &arr)
{
    for(int i=0;i<arr.size()-1;i++)
    {
        for(int j=0;j<arr.size()-1-i;j++)
        {
            if(arr[j]>arr[j+1])
            {
                swap(&arr[j],&arr[j+1]);
            }
        }
    }
}


void para_bubble(vector<int> &arr)
{
    int i,j;
    #pragma omp parallel shared(arr) private(i,j)
    for( i=0;i<arr.size()-1;i++)
    {
        #pragma omp parallel for
        for( j=0;j<arr.size()-1-i;j++)
        {
            if(arr[j]>arr[j+1])
            {
                swap(&arr[j],&arr[j+1]);
            }
        }
    }
}

int main()
{
    vector<int> a;
    int n;
    cin>>n;
    for(int i=0;i<n;i++)
    {
        int z;
        cin>>z;
        a.push_back(z);
    }
    auto start=chrono::high_resolution_clock::now();
    bubble(a);
    
    
    for(int i=0;i<n;i++)
    {
        cout<<a[i]<<" ";
    }
    auto end=chrono::high_resolution_clock::now();
    cout<<"\nTime spent in sequential :"<<chrono::duration_cast<chrono::microseconds>(end-start).count()<<" microseconds"<<endl;

vector<int> a1;
    int n1;
    cin>>n1;
    for(int i=0;i<n1;i++)
    {
        int z;
        cin>>z;
        a1.push_back(z);
    }
    auto start1=chrono::high_resolution_clock::now();
    para_bubble(a1);
    
    
    for(int i=0;i<n1;i++)
    {
        cout<<a1[i]<<" ";
    }
    auto end1=chrono::high_resolution_clock::now();
    cout<<"\nTime spent in sequential :"<<chrono::duration_cast<chrono::microseconds>(end1-start1).count()<<" microseconds"<<endl;


    return 0;
}

